<form>
  <label>GP2GP Practice Visits</label>
  <fieldset submitButton="false">
    <input type="time" token="report_time">
      <label>Search date range</label>
      <default>
        <earliest></earliest>
        <latest></latest>
      </default>
    </input>
    <input type="text" token="practice_ods" searchWhenChanged="true">
      <label>Practice ODS</label>
    </input>
  </fieldset>
  <row>
    <panel>
      <single>
        <search>
          <query>| inputlookup Spine2-NACS-Lookup | search OrgType="GP Practice" NACS="$practice_ods$"  | sort Timestamp | dedup NACS | table OrgName</query>
        </search>
      </single>
    </panel>
  </row>
  <row>
    <panel>
      <single>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-HR" RequestorODS="$practice_ods$"
          | rex field=RequestorSoftware "(?&lt;RequestorSupplier>.*)_(?&lt;RequestorSystem>.*)_(?&lt;RequestorVersion>.*)" 
          | dedup RequestorSystem 
          | table RequestorSystem 
          | mvcombine RequestorSystem 
          | eval RequestorSystem=mvjoin(RequestorSystem, " | ")</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </single>
    </panel>
  </row>
  <row>
    <panel>
      <table>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-HR" RequestorODS="$practice_ods$" 
          | rex field=RequestorSoftware "(?&lt;RequestorSupplier>.*)_(?&lt;RequestorSystem>.*)_(?&lt;RequestorVersion>.*)" 
          | sort _time
          | dedup RequestorSoftware 
          | eval From=strftime(_time, "%Y-%m-%d") 
          | table From, RequestorSupplier, RequestorSystem, RequestorVersion</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <single>
        <search>
          <query>| stats count as mytext | eval mytext = "Registrations"</query>
        </search>
      </single>
    </panel>
  </row>
  <row>
    <panel>
      <single>
        <title>Total registrations</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown")
          | dedup key
          | stats count
          </query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </single>
      <single>
        <title>GP2GP transfers</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) or (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60)
          | stats count
          </query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </single>
      <single>
        <title>GP2GP integrations</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval category=case(
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15) and ((ExtractAckStatus==1 and ExtractAckCode==0) or (ExtractAckStatus==5 and ExtractAckCode==15)),"GP2GP Success and Integrated",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15),"GP2GP Success not Integrated",
  (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60) or (RequestFailurePoint==0 and isnull(RequestFailureTime) and (RequestErrorCode!=-1 or (ExtractResult!=0 and ExtractResult!=15))),"GP2GP Failure"
)
          | where category=="GP2GP Success and Integrated"
          | stats count
          </query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </single>
      <single>
        <title>GP2GP failures</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval category=case(
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15) and ((ExtractAckStatus==1 and ExtractAckCode==0) or (ExtractAckStatus==5 and ExtractAckCode==15)),"GP2GP Success and Integrated",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15),"GP2GP Success not Integrated",
  (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60) or (RequestFailurePoint==0 and isnull(RequestFailureTime) and (RequestErrorCode!=-1 or (ExtractResult!=0 and ExtractResult!=15))),"GP2GP Failure"
)
          | where category=="GP2GP Failure"
          | stats count
          </query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </single>
    </panel>
    <panel>
      <chart>
        <title>Overall registration category</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval category=case(
  RegistrationType==1 and RequestFailureType==5, "New registration",
  RegistrationType==2 and RequestFailureType==5,"Returning registration (no GP)",
  RequestFailureType==2,"Already registered",
  RequestFailurePoint==10 or RequestFailurePoint==20,"PDS lookup failure",
  RequestFailureType!=3 and RequestFailureType!=4 and (RequestFailurePoint==40 or RequestFailurePoint==50),"SDS lookup failure",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15) and ((ExtractAckStatus==1 and ExtractAckCode==0) or (ExtractAckStatus==5 and ExtractAckCode==15)),"GP2GP Success and Integrated",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15),"GP2GP Success not Integrated",
  (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60) or (RequestFailurePoint==0 and isnull(RequestFailureTime) and (RequestErrorCode!=-1 or (ExtractResult!=0 and ExtractResult!=15))),"GP2GP Failure",
  RequestFailureType==3 or RequestFailureType==4,"Transfer from non-GP2GP practice",
  RegistrationType==3 and RequestFailureType==0,"Internal Transfer Success",
  1=1,"Unknown"
)
          | dedup key 
          | stats count by category</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <chart>
        <title>GP2GP failure types</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
            | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
            | eval RegistrationType=coalesce(RegistrationType,0)
            | eval RequestFailureType=coalesce(RequestFailureType,-1) 
            | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
            | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
            | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
            | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
            | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
            | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) or 
                (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60)
            | eval is_error=if(ExtractResult==0 or ExtractResult==15,0,1)
            | search is_error=1
            | eval ErrorCode=if(RequestErrorCode!=-1,RequestErrorCode,ExtractResult)
            | eval category=case(
                ErrorCode==-1,"Unknown",
                ErrorCode==23 or ErrorCode==25 or (ErrorCode &gt;= 29 and ErrorCode &lt;= 31),"Large message failure",
                ErrorCode==100 or ErrorCode==101,"TPP LM limits",
                ErrorCode==12,"Duplicate",
                ErrorCode==10,"Failed to generate",
                ErrorCode==6,"Unknown Patient",
                ErrorCode==17 or ErrorCode==28,"Received and rejected",
                1=1,"Other")
            | stats count by category</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
    <panel>
      <chart>
        <title>GP2GP request error codes</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) or 
              (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60)
          | eval is_error=if(ExtractResult==0 or ExtractResult==15,0,1)
          | search is_error=1
          | stats count by RequestErrorCode</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
    <panel>
      <chart>
        <title>GP2GP extract ack codes</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) or 
              (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60)
          | eval is_error=if(ExtractResult==0 or ExtractResult==15,0,1)
          | search is_error=1
          | stats count by ExtractResult</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
    <panel>
      <chart>
        <title>GP2GP filing status</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS,"Unknown")            
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval ExtractAckStatus=tonumber(coalesce(ExtractAckStatus,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval ExtractResultLabel=if(ExtractResult==0,"NONE",ExtractResult)
          | eval ExtractAckStatusLabel=case(
            ExtractAckStatus==-1,"Not acknowledged",
            ExtractAckStatus==0,"Not sent",
            ExtractAckStatus==1 and ExtractResultLabel=="NONE","Integrated",
            ExtractAckStatus==2,"Filing rejected",
            ExtractAckStatus==3,"Duplicate",
            ExtractAckStatus==4,"Not requested",
            ExtractAckStatus==5 and ExtractResultLabel==15,"Suppressed",
            ExtractAckStatus==5 and ExtractResultLabel!=15,"Filed as attachment",
            ExtractAckStatus==6,"Large message failure",
            ExtractAckStatus==7,"Filing failed",
            1=1,"Other"
)
          | where ((RequestFailurePoint==0 and isnull(RequestFailureTime)) or (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60)) and ExtractAckStatusLabel!="Integrated"
          | dedup key 
          | stats count by ExtractAckStatusLabel
          </query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>Total registrations by smartcard</title>
      <chart>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | dedup key
          | stats count by RegistrationSmartcardUID</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
    <panel>
      <title>Registration failures by smartcard</title>
      <chart>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval category=case(
  RegistrationType==1 and RequestFailureType==5, "New registration",
  RegistrationType==2 and RequestFailureType==5,"Returning registration (no GP)",
  RequestFailureType==2,"Already registered",
  RequestFailurePoint==10 or RequestFailurePoint==20,"PDS lookup failure",
  RequestFailureType!=3 and RequestFailureType!=4 and (RequestFailurePoint==40 or RequestFailurePoint==50),"SDS lookup failure",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15) and ((ExtractAckStatus==1 and ExtractAckCode==0) or (ExtractAckStatus==5 and ExtractAckCode==15)),"GP2GP Success and Integrated",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15),"GP2GP Success not Integrated",
  (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60) or (RequestFailurePoint==0 and isnull(RequestFailureTime) and (RequestErrorCode!=-1 or (ExtractResult!=0 and ExtractResult!=15))),"GP2GP Failure",
  RequestFailureType==3 or RequestFailureType==4,"Transfer from non-GP2GP practice",
  RegistrationType==3 and RequestFailureType==0,"Internal Transfer Success",
  1=1,"Unknown"
)
          | where category=="Already registered" or category=="PDS lookup failure" or category=="SDS lookup failure" or category=="Unknown"
          | dedup key
          | stats count by RegistrationSmartcardUID</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>GP2GP transfers that fail by smartcard</title>
      <chart>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | where (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60) or (RequestFailurePoint==0 and isnull(RequestFailureTime) and (RequestErrorCode!=-1 or (ExtractResult!=0 and ExtractResult!=15)))
          | dedup key
          | stats count by RegistrationSmartcardUID</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
    <panel>
      <title>GP2GP pending acknowledgement by smartcard</title>
      <chart>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) and (ExtractAckCode != 0 and ExtractAckCode != 15)
          | dedup key
          | stats count by RegistrationSmartcardUID</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <title>Registrations that failed</title>
      <table>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval category=case(
  RegistrationType==1 and RequestFailureType==5, "New registration",
  RegistrationType==2 and RequestFailureType==5,"Returning registration (no GP)",
  RequestFailureType==2,"Already registered",
  RequestFailurePoint==10 or RequestFailurePoint==20,"PDS lookup failure",
  RequestFailureType!=3 and RequestFailureType!=4 and (RequestFailurePoint==40 or RequestFailurePoint==50),"SDS lookup failure",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15) and ((ExtractAckStatus==1 and ExtractAckCode==0) or (ExtractAckStatus==5 and ExtractAckCode==15)),"GP2GP Success and Integrated",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15),"GP2GP Success not Integrated",
  (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60) or (RequestFailurePoint==0 and isnull(RequestFailureTime) and (RequestErrorCode!=-1 or (ExtractResult!=0 and ExtractResult!=15))),"GP2GP Failure",
  RequestFailureType==3 or RequestFailureType==4,"Transfer from non-GP2GP practice",
  RegistrationType==3 and RequestFailureType==0,"Internal Transfer Success",
  1=1,"Unknown"
)
          | where category=="Already registered" OR category=="PDS lookup failure" OR category=="SDS lookup failure" OR category=="Unknown"
          | dedup key
          | table RegistrationTime, RegistrationSmartcardUID, RegistrationType, RequestFailurePoint, RequestFailureType
          | sort RegistrationTime</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <title>GP2GP transfers that failed</title>
      <table>
      <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | join type=outer SenderODS [search index="gp2gp-mi" sourcetype="gppractice-HR" | rename RequestorODS as SenderODS | rename RequestorSoftware as SenderSoftware]
          | lookup Spine2-NACS-Lookup NACS AS SenderODS OUTPUTNEW OrgName AS SenderOrgName MName AS SenderSupplier, PName AS SenderSystem, PVersion AS SenderVersion
          | eval SenderSoftware=coalesce(SenderSoftware, SenderSupplier + "-" + SenderSystem + "-" + SenderVersion)
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | where (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60) or (RequestFailurePoint==0 and isnull(RequestFailureTime) and (RequestErrorCode!=-1 or (ExtractResult!=0 and ExtractResult!=15)))
          | dedup key
          | table RegistrationTime, ExtractTime, ExtractAckTime, ConversationID, RegistrationSmartcardUID, RequestFailurePoint, RequestFailureType, RequestErrorCode, ExtractAckCode, 
                  ExtractAckStatus, SenderOrgName, SenderODS, SenderSoftware
          | sort RegistrationTime</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
      </search>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <title>GP2GP transfers pending acknowledgement</title>
      <table>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" RequestorODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | join type=outer SenderODS [search index="gp2gp-mi" sourcetype="gppractice-HR" | rename RequestorODS as SenderODS | rename RequestorSoftware as SenderSoftware]
          | lookup Spine2-NACS-Lookup NACS AS SenderODS OUTPUTNEW OrgName AS SenderOrgName MName AS SenderSupplier, PName AS SenderSystem, PVersion AS SenderVersion
          | eval SenderSoftware=coalesce(SenderSoftware, SenderSupplier + "-" + SenderSystem + "-" + SenderVersion)
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) and (ExtractAckCode != 0 and ExtractAckCode != 15)
          | dedup key
          | table RegistrationTime, ExtractTime, ConversationID, RegistrationSmartcardUID, SenderOrgName, SenderODS, SenderSoftware
          | sort RegistrationTime</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <single>
        <search>
          <query>| stats count as mytext | eval mytext = "Extracts"</query>  
        </search>
      </single>
    </panel>
  </row>
  <row>
    <panel>
      <single>
        <title>Total extracts</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-SR" SenderODS="$practice_ods$"
          | dedup ConversationID
          | stats count
          </query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </single>
      <single>
        <title>Failed extracts</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-SR" SenderODS="$practice_ods$"
          | eval ExtractFailurePoint=coalesce(ExtractFailurePoint, -1)
          | eval RequestAckCode=coalesce(RequestAckCode, -1)
          | eval RequestAckCode=tonumber(RequestAckCode) 
          | eval is_success=if(ExtractFailurePoint==0 and RequestAckCode==0,1,0)
          | eval is_failure=if(is_success==1,0,1)
          | dedup ConversationID
          | stats sum(is_failure)
          </query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </single>
      <single>
        <title>Extracts awaiting acknowledgement</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" SenderODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | where isnotnull(ExtractEventTime) and (RequestFailurePoint==0 and isnull(RequestFailureTime)) and (ExtractAckCode != 0 and ExtractAckCode != 15)
          | dedup key
          | stats count
          </query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </single>
    </panel>
    <panel>
      <chart>
        <title>Successful extracts by requestor supplier</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-SR" SenderODS="$practice_ods$"
          | join type=outer RequestorODS [search index="gp2gp-mi" sourcetype="gppractice-HR"] 
          | rex field=RequestorSoftware "(?&lt;RequestorSupplier>.*)_(?&lt;RequestorSystem>.*)_(?&lt;RequestorVersion>.*)"
          | lookup Spine2-NACS-Lookup NACS AS RequestorODS OUTPUTNEW MName AS MName
          | eval RequestorSupplier=coalesce(RequestorSupplier, MName, "Unknown")
          | eval ExtractFailurePoint=coalesce(ExtractFailurePoint, -1)
          | eval RequestAckCode=coalesce(RequestAckCode, -1)
          | eval RequestAckCode=tonumber(RequestAckCode) 
          | where ExtractFailurePoint==0 and RequestAckCode==0
          | dedup ConversationID
          | stats count by RequestorSupplier</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
    <panel>
      <chart>
        <title>Failed extracts by requestor supplier</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-SR" SenderODS="$practice_ods$"
          | join type=outer RequestorODS [search index="gp2gp-mi" sourcetype="gppractice-HR"] 
          | rex field=RequestorSoftware "(?&lt;RequestorSupplier>.*)_(?&lt;RequestorSystem>.*)_(?&lt;RequestorVersion>.*)"
          | lookup Spine2-NACS-Lookup NACS AS RequestorODS OUTPUTNEW MName AS MName
          | eval RequestorSupplier=coalesce(RequestorSupplier, MName, "Unknown")
          | eval ExtractFailurePoint=coalesce(ExtractFailurePoint, -1)
          | eval RequestAckCode=coalesce(RequestAckCode, -1)
          | eval RequestAckCode=tonumber(RequestAckCode) 
          | where ExtractFailurePoint!=0 or RequestAckCode!=0
          | dedup ConversationID
          | stats count by RequestorSupplier</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
    <panel>
      <chart>
        <title>Failed extract reasons</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-SR" SenderODS="$practice_ods$"
          | eval ExtractFailurePoint=coalesce(ExtractFailurePoint, -1)
          | eval RequestAckCode=coalesce(RequestAckCode, -1)
          | eval RequestAckCode=tonumber(RequestAckCode) 
          | eval category=case(
              ExtractFailurePoint==0 and RequestAckCode==0,"Success",
              ExtractFailurePoint==0 and RequestAckCode==7,"GP2GP disabled",
              ExtractFailurePoint==10 and RequestAckCode==6,"Patient not at surgery",
              ExtractFailurePoint==10, "Patient lookup failure",
              ExtractFailurePoint==20,"Requestor not current GP",
              ExtractFailurePoint==30 or ExtractFailurePoint==40,"Communications setup failure",
              ExtractFailurePoint==50 and RequestAckCode==14,"Requester not large message compliant",
              ExtractFailurePoint==50,"Large message failure",
              ExtractFailurePoint==60 and RequestAckCode==10,"Unable to generate EHR",
              ExtractFailurePoint==60 and RequestAckCode==30,"Large message failure",
              ExtractFailurePoint==60,"Unable to send EHR",
              1=1,"Unknown failure") | where category!="Success"
          | dedup ConversationID
          | stats count by category</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
        <option name="charting.chart">pie</option>
      </chart>
    </panel>
  </row>
  <row>
    <panel>
      <table>
        <title>Extract Failures</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-SR" SenderODS="$practice_ods$"
          | join type=outer RequestorODS [search index="gp2gp-mi" sourcetype="gppractice-HR"]
          | lookup Spine2-NACS-Lookup NACS AS RequestorODS OUTPUTNEW OrgName AS RequestorOrgName MName AS RequestorSupplier, PName AS RequestorSystem, PVersion AS RequestorVersion 
          | eval RequestorSoftware=coalesce(RequestorSoftware, RequestorSupplier + "-" + RequestorSystem + "-" + RequestorVersion)
          | eval ExtractFailurePoint=coalesce(ExtractFailurePoint, -1) 
          | eval RequestAckCode=coalesce(RequestAckCode,-1)
          | eval RequestAckCode=tonumber(RequestAckCode) 
          | where ExtractFailurePoint!=0 or RequestAckCode!=0
          | dedup ConversationID 
          | table RequestTime, ExtractFailureTime, ExtractFailureType, ExtractFailurePoint, LargeMessagingRequired, RequestAckTime, RequestAckCode, RequestorOrgName, RequestorODS, RequestorSoftware</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <table>
        <title>Extracts awaiting acknowledgement</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" SenderODS="$practice_ods$"
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | join type=outer RequestorODS [search index="gp2gp-mi" sourcetype="gppractice-HR"]
          | lookup Spine2-NACS-Lookup NACS AS RequestorODS OUTPUTNEW OrgName AS RequestorOrgName MName AS RequestorSupplier, PName AS RequestorSystem, PVersion AS RequestorVersion 
          | eval RequestorSoftware=coalesce(RequestorSoftware, RequestorSupplier + "-" + RequestorSystem + "-" + RequestorVersion)
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | where isnotnull(ExtractEventTime) and (RequestFailurePoint==0 and isnull(RequestFailureTime)) and (ExtractAckCode != 0 and ExtractAckCode != 15)
          | dedup key
          | table RegistrationTime, ExtractTime, ConversationID, RegistrationSmartcardUID, RequestorOrgName, RequestorODS, RequestorSoftware
          | sort RegistrationTime</query>
          <earliest>$report_time.earliest$</earliest>
          <latest>$report_time.latest$</latest>
        </search>
      </table>
    </panel>
  </row>
</form>