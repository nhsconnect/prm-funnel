<form>
  <label>RR Funnel</label>
  <fieldset submitButton="false">
    <input type="time" token="range">
      <label></label>
    </input>
  </fieldset>
  <row>
    <panel>
      <table>
        <title>Overall Registration category</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" 
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval category=case(
  RegistrationType==1 and RequestFailureType==5, "New registration",
  RegistrationType==2 and RequestFailureType==5,"Returning registration (no GP)",
  RequestFailureType==2,"Already registered",
  RequestFailurePoint==10 or RequestFailurePoint==20,"PDS lookup failure",
  RequestFailureType!=3 and RequestFailureType!=4 and (RequestFailurePoint==40 or RequestFailurePoint==50),"SDS lookup failure",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15) and ((ExtractAckStatus==1 and ExtractAckCode==0) or (ExtractAckStatus==5 and ExtractAckCode==15)),"GP2GP Success and Integrated",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15),"GP2GP Success not Integrated",
  (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60) or (RequestFailurePoint==0 and isnull(RequestFailureTime) and (RequestErrorCode!=-1 or (ExtractResult!=0 and ExtractResult!=15))),"GP2GP Failure",
  RequestFailureType==3 or RequestFailureType==4,"Transfer from non-GP2GP practice",
  RegistrationType==3 and RequestFailureType==0,"Internal Transfer Success",
  1=1,"Unknown"
)
          | eval is_error=case(category=="New registration",0,category=="Returning registration (no GP)",0,category=="Already registered",0,category=="GP2GP Success not Integrated",0,category=="GP2GP Success and Integrated",0,category=="Transfer from non-GP2GP practice",0,category=="Internal Transfer Success",0,1=1,1)
          | dedup key 
          | stats count by category, is_error 
          | eventstats sum(count) as total, sum(eval(if(is_error==1,count,0))) as total_errors
          | sort -count</query>
          <earliest>$range.earliest$</earliest>
          <latest>$range.latest$</latest>
        </search>
      </table>
    </panel>
    <panel>
      <table>
        <title>High-level Registration category</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" 
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval category=case(
  RegistrationType==1 and RequestFailureType==5, "New registration",
  RegistrationType==2 and RequestFailureType==5,"Returning registration (no other GP)",
  RequestFailureType==2,"Already registered",
  RequestFailurePoint==10 or RequestFailurePoint==20,"Patient lookup failure",
  RequestFailureType!=3 and RequestFailureType!=4 and (RequestFailurePoint==40 or RequestFailurePoint==50),"GP system lookup failure",
  (RegistrationType==3 and RequestFailureType==0) or RequestFailureType==3 or RequestFailureType==4 or (RequestFailureType !=5 and RequestFailurePoint==60) or (RequestFailurePoint==0 and isnull(RequestFailureTime)),"Transfer",
  1=1,"Unknown"
)
          | dedup key 
          | stats count by category 
          | eventstats sum(count) as total
          | sort -count</query>
          <earliest>$range.earliest$</earliest>
          <latest>$range.latest$</latest>
        </search>
      </table>
      <table>
        <title>Transfer category</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" 
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval category=case(
  RequestFailureType==3 or RequestFailureType==4,"Transfer from non-GP2GP practice",
  RegistrationType==3 and RequestFailureType==0,"Internal Transfer",
  (RequestFailurePoint==0 and isnull(RequestFailureTime)) or (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60),"GP2GP"
)
          | dedup key 
          | stats count by category 
          | eventstats sum(count) as total
          | sort -count</query>
          <earliest>$range.earliest$</earliest>
          <latest>$range.latest$</latest>
        </search>
      </table>
      <table>
        <title>GP2GP category</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" 
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval category=case(
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15) and ((ExtractAckStatus==1 and ExtractAckCode==0) or (ExtractAckStatus==5 and ExtractAckCode==15)),"GP2GP Success and Integrated",
  RequestFailurePoint==0 and RequestErrorCode==-1 and (ExtractResult==0 or ExtractResult==15),"GP2GP Success not Integrated",
  (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60) or (RequestFailurePoint==0 and isnull(RequestFailureTime) and (RequestErrorCode!=-1 or (ExtractResult!=0 and ExtractResult!=15))),"GP2GP Failure"
)
          | dedup key 
          | stats count by category
          | eventstats sum(count) as total
          | sort -count</query>
          <earliest>$range.earliest$</earliest>
          <latest>$range.latest$</latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <table>
        <title>GP2GP Interactions Filing Status</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" 
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS,"Unknown")            
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval ExtractAckStatus=tonumber(coalesce(ExtractAckStatus,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval ExtractResultLabel=if(ExtractResult==0,"NONE",ExtractResult)
          | eval ExtractAckStatusLabel=case(ExtractAckStatus==0,"Not Sent",ExtractAckStatus==1,"Successfully integrated",ExtractAckStatus==2,"Filing rejected",ExtractAckStatus==3,"Duplicate Received",ExtractAckStatus==4,"Not Requested",ExtractAckStatus==5,"Filed as attachment",ExtractAckStatus==6,"Large Message Problem",ExtractAckStatus==7,"Filing failed",1=1,ExtractAckStatus)
          | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) or (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60)
          | eval is_error=if((ExtractAckStatus==1 and ExtractAckCode==0) or ExtractAckStatus==5,0,1)
          | eval service="gp2gp"
          | lookup JDIE-Lookup jdiEvent AS ExtractResultLabel,service OUTPUTNEW JDIEText
          | eval JDIEText=coalesce(JDIEText,ExtractResultLabel)
          | dedup key 
          | stats count by ExtractAckStatusLabel, ExtractAckStatus, JDIEText, ExtractResultLabel, is_error
          | eventstats sum(count) as total, sum(eval(if(is_error==1,count,0))) as total_errors 
          | sort -count</query>
          <earliest>$range.earliest$</earliest>
          <latest>$range.latest$</latest>
        </search>
      </table>
      <table>
        <title>Filing Status</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" 
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS,"Unknown")            
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval ExtractAckStatus=tonumber(coalesce(ExtractAckStatus,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval ExtractResultLabel=if(ExtractResult==0,"NONE",ExtractResult)
          | eval ExtractAckStatusLabel=case(
            ExtractAckStatus==-1,"Not acknowledged",
            ExtractAckStatus==0,"Not sent",
            ExtractAckStatus==1 and ExtractResultLabel=="NONE","Integrated",
            ExtractAckStatus==2,"Filing rejected",
            ExtractAckStatus==3,"Duplicate",
            ExtractAckStatus==4,"Not requested",
            ExtractAckStatus==5 and ExtractResultLabel==15,"Suppressed",
            ExtractAckStatus==5 and ExtractResultLabel!=15,"Filed as attachment",
            ExtractAckStatus==6,"Large message failure",
            ExtractAckStatus==7,"Filing failed",
            1=1,"Other"
)
          | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) or (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60)
          | dedup key 
          | stats count by ExtractAckStatusLabel
          | eventstats sum(count) as total
          | sort -count</query>
          <earliest>$range.earliest$</earliest>
          <latest>$range.latest$</latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <table>
        <title>GP2GP Interactions by RequestErrorCode</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" 
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS, "Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval RequestErrorNumber=tonumber(coalesce(RequestErrorCode,-1))
          | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) or (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60)
          | eval RequestErrorDescription=coalesce(RequestErrorDescription,"Success") 
          | eval RequestErrorDescription=if(like(RequestErrorDescription,"Attachment %"),"TPP attachment limit",RequestErrorDescription) 
          | eval RequestErrorDescription=replace(RequestErrorDescription,"'","") | eval RequestErrorDescription=replace(RequestErrorDescription,"\.","")
          | eval RequestErrorDescription=if(like(RequestErrorDescription,"Patient %"),"Patient not at surgery",RequestErrorDescription)
          | eval is_error=if(RequestErrorDescription=="Success",0,1)
          | search is_error=1
          | dedup key 
          | stats count by RequestErrorDescription
          | eventstats sum(count) as total
          | sort -count</query>
          <earliest>$range.earliest$</earliest>
          <latest>$range.latest$</latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <table>
        <title>GP2GP Interactions by ExtractAckCode</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" 
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS,"Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval ExtractResultLabel=if(ExtractResult==0,"NONE",ExtractResult)
          | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) or (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60)
          | eval is_error=if(ExtractResultLabel=="NONE" or ExtractResultLabel==15,0,1)
          | search is_error=1
          | eval service="gp2gp"
          | lookup JDIE-Lookup jdiEvent AS ExtractResultLabel,service OUTPUTNEW JDIEText
          | eval JDIEText=coalesce(JDIEText,ExtractResultLabel)
          | dedup key 
          | stats count by JDIEText, ExtractResultLabel
          | eventstats sum(count) as total
          | sort -count</query>
          <earliest>$range.earliest$</earliest>
          <latest>$range.latest$</latest>
        </search>
      </table>
    </panel>
  </row>
  <row>
    <panel>
      <table>
        <title>GP2GP Failures</title>
        <search>
          <query>index="gp2gp-mi" sourcetype="gppractice-RR" 
          | eval key=RegistrationTime + "-" + RequestorODS + "-" + coalesce(SenderODS,"Unknown") 
          | eval RegistrationType=coalesce(RegistrationType,0)
          | eval RequestFailureType=coalesce(RequestFailureType,-1) 
          | eval RequestFailurePoint=coalesce(RequestFailurePoint,-1)
          | eval RequestErrorCode=tonumber(coalesce(RequestErrorCode,-1))
          | eval RequestErrorLabel=if(RequestErrorCode==0,"NONE",RequestErrorCode)
          | eval ExtractAckCode=tonumber(coalesce(ExtractAckCode,-1))
          | eval ExtractEventTime=coalesce(ExtractAckTime,ExtractTime)
          | eval ExtractResult=if(ExtractAckCode==-1 and isnotnull(ExtractEventTime),0,ExtractAckCode)
          | eval ExtractResultLabel=if(ExtractResult==0,"NONE",ExtractResult)
          | where (RequestFailurePoint==0 and isnull(RequestFailureTime)) or 
              (RegistrationType!=3 and RequestFailureType!=2 and RequestFailureType!=5 and RequestFailurePoint==60)
          | eval is_error=if(ExtractResultLabel=="NONE" or ExtractResultLabel==15,0,1)
          | search is_error=1
          | eval service="gp2gp"
          | lookup JDIE-Lookup jdiEvent AS ExtractResultLabel,service OUTPUTNEW JDIEText AS ExtractResultText 
          | eval ExtractResultText=if (ExtractResult==100,"TPP attachment limit",ExtractResultText) 
          | eval ExtractResultText=if(like(ExtractResultText,"%Large %"),"Large Message failure",ExtractResultText)
          | eval ExtractResultText=coalesce(ExtractResultText,"Unknown")
          | lookup JDIE-Lookup jdiEvent AS RequestErrorLabel,service OUTPUTNEW JDIEText AS RequestErrorText 
          | eval RequestErrorText=if (RequestErrorCode==100,"TPP attachment limit",RequestErrorText) 
          | eval RequestErrorText=if(like(RequestErrorText,"%Large %"),"Large Message failure",RequestErrorText)
          | eval RequestErrorText=coalesce(RequestErrorText,"Unknown")
          | eval JDIEText=if(RequestErrorText!="Unknown",RequestErrorText,ExtractResultText) 
          | dedup key 
          | stats count by JDIEText
          | eventstats sum(count) as total
          | sort -count</query>
          <earliest>$range.earliest$</earliest>
          <latest>$range.latest$</latest>
        </search>
      </table>
    </panel>
  </row>
</form>​
